Awesome ‚Äî since you're using **Replit with Node.js**, here's how to get Discord OAuth2 working with the `/discord/callback` route to fetch the user's profile.

---

## ‚úÖ Step-by-Step for Discord OAuth2 on Replit (Node.js)

### üîß 1. **Update Discord Redirect URI**

In the [Discord Developer Portal](https://discord.com/developers/applications):

* Go to **OAuth2 ‚Üí Redirects**
* Set your redirect URL to:

  ```
  https://renegaderaider.wtf/discord/callback
  ```

---

### üìù 2. **Update Your OAuth Login Link**

This will redirect users to Discord and back to your site with a code:

```js
const CLIENT_ID = '1393354181536120966';
const REDIRECT_URI = encodeURIComponent('https://renegaderaider.wtf/discord/callback');

const discordLoginURL = `https://discord.com/oauth2/authorize?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=code&scope=identify`;
```

Use that in your frontend with a "Login with Discord" button.

---

### üîÅ 3. **Create the `/discord/callback` Route in Express**

In your `index.js` or `app.js`:

```js
const express = require('express');
const axios = require('axios');
const app = express();

const CLIENT_ID = '1393354181536120966';
const CLIENT_SECRET = 'YOUR_DISCORD_CLIENT_SECRET';
const REDIRECT_URI = 'https://renegaderaider.wtf/discord/callback';

app.get('/discord/callback', async (req, res) => {
  const code = req.query.code;
  if (!code) return res.status(400).send('Missing code');

  try {
    // Exchange code for access token
    const tokenRes = await axios.post('https://discord.com/api/oauth2/token', new URLSearchParams({
      client_id: CLIENT_ID,
      client_secret: CLIENT_SECRET,
      grant_type: 'authorization_code',
      code,
      redirect_uri: REDIRECT_URI,
      scope: 'identify'
    }), {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    });

    const accessToken = tokenRes.data.access_token;

    // Use access token to get user info
    const userRes = await axios.get('https://discord.com/api/users/@me', {
      headers: {
        Authorization: `Bearer ${accessToken}`
      }
    });

    const user = userRes.data;

    // Optional: save user info to a session or database
    res.send(`
      <h1>Welcome, ${user.username}#${user.discriminator}!</h1>
      <img src="https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png" />
    `);
  } catch (err) {
    console.error(err?.response?.data || err);
    res.status(500).send('OAuth failed');
  }
});
```

---

### üß™ 4. **Test It**

* Go to:
  `https://discord.com/oauth2/authorize?client_id=1393354181536120966&redirect_uri=https%3A%2F%2Frenegaderaider.wtf%2Fdiscord%2Fcallback&response_type=code&scope=identify`

* Authorize

* You‚Äôll be redirected back to `https://renegaderaider.wtf/discord/callback`

* You should see your Discord username and avatar üéâ

---

### üõ°Ô∏è 5. **Security Tips (Optional but Important)**

* Store your `CLIENT_SECRET` in Replit‚Äôs **Secrets** (under "Environment Variables") and use `process.env.DISCORD_CLIENT_SECRET`
* Add proper error handling and rate limits
* Optionally log users into your app using sessions

---

Let me know if:

* You want this to redirect back to your homepage with user info
* You want help storing the user in a session
* You want to allow avatars to be used as profile pictures, etc.

Ready to make your Discord login live üí•
